// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SolidToken.SpecFlow.DependencyInjection.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ContextInjectionScopeFeature : Xunit.IClassFixture<ContextInjectionScopeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ContextInjectionScope.feature"
#line hidden
        
        public ContextInjectionScopeFeature(ContextInjectionScopeFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContextInjectionScope", "    Issue #12: Scoping Context Injection to Scenario Execution Lifetimes\r\n    htt" +
                    "ps://github.com/solidtoken/SpecFlow.DependencyInjection/issues/12", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Assert Context Is Scoped To Scenario Execution")]
        [Xunit.TraitAttribute("FeatureTitle", "ContextInjectionScope")]
        [Xunit.TraitAttribute("Description", "Assert Context Is Scoped To Scenario Execution")]
        public virtual void AssertContextIsScopedToScenarioExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assert Context Is Scoped To Scenario Execution", "    The multiply and increase steps are intentionally implemented using different" +
                    " bindings.\r\n    Assert that they can operate on the same context (within the sce" +
                    "nario executing).", ((string[])(null)));
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.Given("I have test context with number 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.When("I multiply the test context number by 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
    testRunner.And("I increase the test context number by 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
    testRunner.Then("the test context number should be 13", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Assert Context Is Scoped To Scenario Execution (No Spill)")]
        [Xunit.TraitAttribute("FeatureTitle", "ContextInjectionScope")]
        [Xunit.TraitAttribute("Description", "Assert Context Is Scoped To Scenario Execution (No Spill)")]
        public virtual void AssertContextIsScopedToScenarioExecutionNoSpill()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assert Context Is Scoped To Scenario Execution (No Spill)", "    Assert that the test context does not spill over to other scenarios.\r\n    Not" +
                    "e that this assumes this scenario will be run after the above one (ie don\'t use " +
                    "parallel tests).", ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
    testRunner.Given("I have a test context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
    testRunner.Then("the test context number should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ContextInjectionScopeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ContextInjectionScopeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
