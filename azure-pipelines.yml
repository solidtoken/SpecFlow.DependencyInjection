# Azure Pipelines Template for NuGet Packages
# Copyright Â© Solid Token (https://www.solidtoken.nl)

variables:
- name: ProjectName
  value: 'SpecFlow.DependencyInjection'
- name: TestProjectName
  value: 'SpecFlow.DependencyInjection.Tests'
- name: NuGetPackageName
  value: 'SolidToken.SpecFlow.DependencyInjection'
- name: NuGetDescription
  value: 'SpecFlow plugin that enables to use Microsoft.Extensions.DependencyInjection for resolving test dependencies.'
- name: BuildConfiguration
  value: 'Release'
- name: GitHubConnection
  value: 'Solid Token GitHub'
- name: NuGetConnection
  value: 'Solid Token NuGet'
- group: CodeSigning

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'
    
stages:
- stage: CI
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      displayName: '.NET SDK 3.1 (until December 3, 2022)'
      inputs:
        version: 3.1.x      
    - task: UseDotNet@2
      displayName: '.NET SDK 5.0 (until May 8, 2022)'
      inputs:
        version: 5.0.x
    - task: UseDotNet@2
      displayName: '.NET SDK 6.0 (until November 8, 2024)'
      inputs:
        version: 6.0.x      
    - task: gitversion/setup@0
      displayName: 'Prepare'
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@0
      name: 'Version'
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(ProjectName)'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '$(TestProjectName)'
        arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code Coverage"'
    - task: DotNetCoreCLI@2
      displayName: 'Pack'
      inputs:
        command: 'pack'
        packagesToPack: '$(ProjectName)'
        configuration: '$(BuildConfiguration)'
        nobuild: true
        includesymbols: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(ProjectName)'
    - task: PublishCodeCoverageResults@1
      displayName: 'Report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'

- stage: CD
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: Release
    variables:
      SemVer: $[stageDependencies.CI.Build.outputs['Version.GitVersion.SemVer']]
      FullSemVer: $[stageDependencies.CI.Build.outputs['Version.GitVersion.FullSemVer']]
      NuGetVersion: $[stageDependencies.CI.Build.outputs['Version.GitVersion.NuGetVersion']]
      InformationalVersion: $[stageDependencies.CI.Build.outputs['Version.GitVersion.InformationalVersion']]
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Prepare'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --tool-path . NuGetKeyVaultSignTool'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download'
      inputs:
        artifactName: '$(ProjectName)'
    # - task: PowerShell@2
    #   displayName: 'Sign'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       .\NuGetKeyVaultSignTool sign $(Pipeline.Workspace)/*.nupkg `
    #       --file-digest "sha256" `
    #       --timestamp-rfc3161 "http://timestamp.sectigo.com" `
    #       --timestamp-digest "sha256" `
    #       --azure-key-vault-url "$(azure-key-vault-url)" `
    #       --azure-key-vault-tenant-id "$(azure-key-vault-tenant-id)" `
    #       --azure-key-vault-client-id "$(azure-key-vault-client-id)" `
    #       --azure-key-vault-client-secret "$(azure-key-vault-client-secret)" `
    #       --azure-key-vault-certificate "$(azure-key-vault-certificate)"
    # - task: NuGetCommand@2
    #   displayName: 'Push'
    #   inputs:
    #     command: 'push'
    #     packagesToPush: '$(Pipeline.Workspace)/*.nupkg'
    #     nuGetFeedType: 'external'
    #     publishFeedCredentials: '$(NuGetConnection)'
    #     includeSymbols: true
    - task: GitHubRelease@1
      displayName: 'Release'
      inputs:
        gitHubConnection: '$(GitHubConnection)'
        repositoryName: '$(Build.Repository.Name)'
        action: 'edit'
        target: '$(Build.SourceVersion)'
        tagSource: 'userSpecifiedTag'
        tag: 'v$(SemVer)'
        title: 'v$(FullSemVer)'
        assets: '$(Pipeline.Workspace)/*'
        releaseNotesSource: 'inline'
        releaseNotesInline: |
          $(NuGetDescription)
          https://www.nuget.org/packages/$(NuGetPackageName)/$(NuGetVersion)

          `$(informationalVersion)`
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        isDraft: true
        isPreRelease: true
