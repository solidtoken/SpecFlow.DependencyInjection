# Azure Pipelines Template for NuGet Packages
# Copyright © Solid Token (https://www.solidtoken.nl)

variables:
  ProjectName: 'SpecFlow.DependencyInjection'
  TestProjectName: 'SpecFlow.DependencyInjection.Tests'
  NuGetPackageName: 'SolidToken.SpecFlow.DependencyInjection'
  NuGetDescription: 'SpecFlow plugin that enables to use Microsoft.Extensions.DependencyInjection for resolving test dependencies.'
  BuildConfiguration: 'Release'
  GitHubConnection: 'Solid Token GitHub'
  NuGetConnection: 'Solid Token NuGet'

trigger:
- main

stages:
- stage: CI
  jobs:
  - job: Build
    steps:
    - task: gitversion/setup@0
      displayName: 'Prepare'
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@0
      name: 'Version'
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(ProjectName)'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '$(TestProjectName)'
        arguments: '--configuration $(BuildConfiguration) --collect "XPlat Code Coverage"'
    - task: DotNetCoreCLI@2
      displayName: 'Pack'
      inputs:
        command: 'pack'
        packagesToPack: '$(ProjectName)'
        configuration: '$(BuildConfiguration)'
        nobuild: true
        includesymbols: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(ProjectName)'
    - task: PublishCodeCoverageResults@1
      displayName: 'Report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'

- stage: CD
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: Release
    variables:
      SemVer: $[stageDependencies.CI.Build.outputs['Version.GitVersion.SemVer']]
      FullSemVer: $[stageDependencies.CI.Build.outputs['Version.GitVersion.FullSemVer']]
      NuGetVersion: $[stageDependencies.CI.Build.outputs['Version.GitVersion.NuGetVersion']]
      InformationalVersion: $[stageDependencies.CI.Build.outputs['Version.GitVersion.InformationalVersion']]
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(ProjectName)'
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: '$(NuGetConnection)'
        includeSymbols: true
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: '$(GitHubConnection)'
        repositoryName: '$(Build.Repository.Name)'
        action: 'edit'
        tagSource: 'manual'
        target: '$(Build.SourceVersion)'
        tag: 'v$(SemVer)'
        title: 'v$(FullSemVer)'
        assets: '$(Pipeline.Workspace)/*'
        releaseNotesSource: 'input'
        releaseNotes: |
          $(NuGetDescription)
          https://www.nuget.org/packages/$(NuGetPackageName)/$(NuGetVersion)

          `$(informationalVersion)`
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        isDraft: false
